name: mermaid-markdown-wrap
description: Convert plain .mmd Mermaid files to Markdown by wrapping them with mermaid code blocks
author: Suguru Takahashi
branding:
  icon: file-text
  color: purple

################################
# Input definitions - Matching CLI options
################################
inputs:
  # Required: Conversion target
  input:
    description: "File path or glob pattern for .mmd/.mermaid files (e.g. 'diagram.mmd', 'src/**/*.{mmd,mermaid}')"
    required: true

  # Basic output settings
  # -o, --out-dir
  out-dir:
    description: "Output directory"
    required: false

  # Content modification
  # --header
  header:
    description: "Header text to prepend"
    required: false
    
  # --footer
  footer:
    description: "Footer text to append"
    required: false

  # Behavior control
  # --remove-source
  remove-source:
    description: "Remove original .mmd files after conversion (default: false)"
    required: false

  # --hide-command
  hide-command:
    description: "Hide the command used in the output (default: false)"
    required: false

  # Configuration file settings
  # -c, --config
  config:
    description: "Config file path"
    required: false

  # GitHub Actions specific options
  pr-comment-mode:
    description: "PR comment mode: 'off' (no comments), 'changed' (only for changed source files), or 'all' (all files generated in this run)"
    required: false
    default: "off"
  
  # PR comment display options
  pr-comment-header:
    description: "Show header in PR comments (true/false)"
    required: false
    default: "true"
  
  # Use collapsible details in PR comments
  pr-comment-details:
    description: "Use collapsible details for PR comments (true/false)"
    required: false
    default: "false"
  
  # Dry-run mode for PR comments
  # This allows testing PR comment functionality locally with act without making actual API calls
  pr-comment-dry-run:
    description: "Dry-run mode for PR comments - show what would be posted without actually posting (true/false)"
    required: false
    default: "false"
  
  # GitHub token input
  github-token:
    description: "GitHub token for PR comments (defaults to github.token)"
    required: false
    default: ${{ github.token }}

####################
# Run steps
####################
runs:
  using: "composite"
  steps:
    # Setup Node.js (required for github-script action)
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    # Setup Bun for faster package execution
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Run mermaid-markdown-wrap
      id: convert
      shell: bash
      run: |
        # Build CLI arguments
        args=("${{ inputs.input }}")
        
        # Add optional arguments
        [[ -n "${{ inputs.out-dir }}" ]] && args+=(--out-dir "${{ inputs.out-dir }}")
        [[ -n "${{ inputs.header }}" ]] && args+=(--header "${{ inputs.header }}")
        [[ -n "${{ inputs.footer }}" ]] && args+=(--footer "${{ inputs.footer }}")
        [[ -n "${{ inputs.config }}" ]] && args+=(--config "${{ inputs.config }}")
        
        # Add boolean flags
        [[ "${{ inputs.remove-source }}" == "true" ]] && args+=(--remove-source)
        [[ "${{ inputs.hide-command }}" == "true" ]] && args+=(--hide-command)
        
        # Run with JSON output and save to file
        bunx mermaid-markdown-wrap@latest "${args[@]}" --log-format json > conversion-results.json
        
        # Display results
        cat conversion-results.json
        
        # Set outputs for next steps
        echo "exit_code=$?" >> $GITHUB_OUTPUT
        echo "has_conversions=$(jq -r 'if .conversions | length > 0 then "true" else "false" end' conversion-results.json)" >> $GITHUB_OUTPUT
        echo "conversion_count=$(jq -r '.conversions | length' conversion-results.json)" >> $GITHUB_OUTPUT
        
        # Check exit status
        FAILED=$(jq -r '.summary.failedConversions' conversion-results.json)
        if [[ "$FAILED" -gt 0 ]]; then
          exit 1
        fi
    
    # PR comment preparation step
    # Split from posting step to enable dry-run testing and better separation of concerns
    - name: Prepare PR comments
      id: prepare-comments
      if: |
        steps.convert.outputs.has_conversions == 'true' &&
        inputs.pr-comment-mode != 'off' && 
        (github.event_name == 'pull_request' || 
         github.event_name == 'pull_request_target' || 
         inputs.pr-comment-dry-run == 'true')
      shell: bash
      run: |
        # Read conversion results
        RESULTS=$(cat conversion-results.json)
        
        # Get PR number from environment
        PR_NUMBER="${{ github.event.pull_request.number }}"
        if [[ -z "$PR_NUMBER" ]]; then
          PR_NUMBER="${{ github.event.issue.number }}"
        fi
        
        # For local testing with act, use a dummy PR number
        # This enables testing without actual PR context
        if [[ -z "$PR_NUMBER" ]]; then
          echo "No PR number found in GitHub context (running locally with act?), using dummy PR #999"
          PR_NUMBER="999"
        fi
        
        # Prepare comment data
        echo "[]" > pr-comments-data.json
        
        # Filter files based on mode
        MODE="${{ inputs.pr-comment-mode }}"
        echo "PR comment mode: $MODE"
        
        # Process conversions and prepare comment data
        if [[ "$MODE" == "all" ]]; then
          # All successfully converted files
          jq -r '.conversions[] | select(.converted == true) | @json' conversion-results.json | while read -r conversion; do
            MARKDOWN_FILE=$(echo "$conversion" | jq -r '.markdownFile')
            FILENAME=$(basename "$MARKDOWN_FILE")
            
            # Read file content
            if [[ -f "$MARKDOWN_FILE" ]]; then
              CONTENT=$(cat "$MARKDOWN_FILE")
              
              # Build comment body
              BODY=""
              if [[ "${{ inputs.pr-comment-header }}" != "false" ]]; then
                BODY+="> ### ðŸ“„ [mermaid-markdown-wrap](https://github.com/sugurutakahashi-1234/mermaid-markdown-wrap) generated: \`$FILENAME\`\n> \n"
              fi
              
              if [[ "${{ inputs.pr-comment-details }}" == "true" ]]; then
                BODY+="<details>\n<summary>Click to expand</summary>\n\n\`\`\`markdown\n$CONTENT\n\`\`\`\n\n</details>"
              else
                BODY+="\`\`\`markdown\n$CONTENT\n\`\`\`"
              fi
              
              # Add to comments data
              jq --arg pr "$PR_NUMBER" --arg body "$BODY" --arg file "$FILENAME" \
                '. += [{"prNumber": ($pr | tonumber), "body": $body, "filename": $file}]' \
                pr-comments-data.json > pr-comments-data.tmp && mv pr-comments-data.tmp pr-comments-data.json
            fi
          done
        fi
        
        # Check if we have comments to post
        COMMENT_COUNT=$(jq '. | length' pr-comments-data.json)
        echo "Prepared $COMMENT_COUNT comments"
        
        # Output comment count for use in next step's condition
        echo "comment_count=$COMMENT_COUNT" >> $GITHUB_OUTPUT
    
    # PR comment posting step - only handles actual API calls
    # Conditions are explicit: has comments, not dry-run, not mode off, and proper event type
    - name: Post PR comments
      if: |
        steps.prepare-comments.outputs.comment_count > 0 &&
        inputs.pr-comment-dry-run == 'false' &&
        (github.event_name == 'pull_request' || 
         github.event_name == 'pull_request_target')
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          
          // Read prepared comment data
          const commentsDataJson = fs.readFileSync('pr-comments-data.json', 'utf8');
          const commentsData = JSON.parse(commentsDataJson);
          
          console.log(`Posting ${commentsData.length} comments to PR...`);
          
          // Post each comment
          for (const comment of commentsData) {
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: comment.prNumber,
                body: comment.body
              });
              
              console.log(`âœ“ Posted comment for: ${comment.filename}`);
            } catch (e) {
              console.error(`Failed to post comment for ${comment.filename}:`, e.message);
            }
          }
          
          console.log('All comments posted successfully');