import { describe, expect, it } from "bun:test";
import type { RawCLIOptions } from "../models/options.js";
import { generateCommandInfo } from "./command-info-generator.js";

// Helper to create RawCLIOptions for tests
// Note: RawCLIOptions are all optional, so we can use partial objects
const createOptions = (overrides: Partial<RawCLIOptions> = {}): RawCLIOptions =>
  overrides;

describe("generateCommandInfo", () => {
  it("should generate basic command with glob pattern", () => {
    const result = generateCommandInfo("*.mermaid", createOptions());
    expect(result).toBe('mermaid-markdown-wrap "*.mermaid"');
  });

  it("should quote glob pattern with spaces", () => {
    const result = generateCommandInfo("my files/*.mermaid", createOptions());
    expect(result).toBe('mermaid-markdown-wrap "my files/*.mermaid"');
  });

  it("should include outDir option", () => {
    const options = createOptions({ outDir: "dist/" });
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd" --out-dir dist/');
  });

  it("should include header with quotes", () => {
    const options = createOptions({ header: "# Documentation" });
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe(
      'mermaid-markdown-wrap "*.mmd" --header "# Documentation"',
    );
  });

  it("should include footer with quotes", () => {
    const options = createOptions({ footer: "Generated by CI" });
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe(
      'mermaid-markdown-wrap "*.mmd" --footer "Generated by CI"',
    );
  });

  it("should include config file", () => {
    const options = createOptions({ config: "custom.yaml" });
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd" --config custom.yaml');
  });

  it("should include remove-source flag", () => {
    const options = createOptions({ removeSource: true });
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd" --remove-source');
  });

  it("should not include remove-source when false", () => {
    const options = createOptions({ removeSource: false });
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd"');
  });

  it("should combine multiple options", () => {
    const options = createOptions({
      outDir: "output/",
      header: "# Diagrams",
      removeSource: true,
      config: "my-config.json",
    });
    const result = generateCommandInfo("**/*.mermaid", options);
    expect(result).toBe(
      'mermaid-markdown-wrap "**/*.mermaid" --out-dir output/ --header "# Diagrams" --config my-config.json --remove-source',
    );
  });

  it("should not quote simple file names", () => {
    const result = generateCommandInfo("diagram.mmd", createOptions());
    expect(result).toBe("mermaid-markdown-wrap diagram.mmd");
  });
});
