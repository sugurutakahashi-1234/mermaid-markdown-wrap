import { describe, expect, test } from "bun:test";
import type { ProcessingOptions } from "../models/options.js";
import { formatMermaidAsMarkdown } from "./mermaid-formatter.js";

// Test helper - specific to this test file
const createOptions = (
  overrides: Partial<ProcessingOptions> = {},
): ProcessingOptions => ({
  header: "",
  footer: "",
  removeSource: false,
  showCommand: true,
  logFormat: "text",
  quiet: false,
  ...overrides,
});

describe("formatMermaidAsMarkdown", () => {
  test("formats basic mermaid content without header or footer", () => {
    const content = "graph TD\n  A --> B";
    const options = createOptions();

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("```mermaid\ngraph TD\n  A --> B\n```");
  });

  test("formats with header only", () => {
    const content = "graph LR";
    const options = createOptions({
      header: "# My Diagram",
    });

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("# My Diagram\n\n```mermaid\ngraph LR\n```");
  });

  test("formats with footer only", () => {
    const content = "sequenceDiagram";
    const options = createOptions({
      footer: "Generated by mermaid-markdown-wrap",
    });

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(
      "```mermaid\nsequenceDiagram\n```\n\nGenerated by mermaid-markdown-wrap",
    );
  });

  test("formats with both header and footer", () => {
    const content = "flowchart TD";
    const options = createOptions({
      header: "## Architecture",
      footer: "Last updated: 2024",
    });

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(
      "## Architecture\n\n```mermaid\nflowchart TD\n```\n\nLast updated: 2024",
    );
  });

  test("trims whitespace from content", () => {
    const content = "\n\n  graph TD\n  A --> B  \n\n";
    const options = createOptions();

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("```mermaid\ngraph TD\n  A --> B\n```");
  });

  test("handles empty content", () => {
    const content = "";
    const options = createOptions();

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("```mermaid\n\n```");
  });

  test("handles content with only whitespace", () => {
    const content = "   \n\n   ";
    const options = createOptions({
      header: "# Empty",
      footer: "End",
    });

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("# Empty\n\n```mermaid\n\n```\n\nEnd");
  });

  test("handles complex multiline content", () => {
    const content = `graph TD
  A[Start] --> B{Decision}
  B -->|Yes| C[Do something]
  B -->|No| D[Do something else]`;
    const options = createOptions();

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(
      "```mermaid\ngraph TD\n  A[Start] --> B{Decision}\n  B -->|Yes| C[Do something]\n  B -->|No| D[Do something else]\n```",
    );
  });

  test("handles multiline headers and footers", () => {
    const content = "graph TD";
    const options = createOptions({
      header: "# Title\n## Subtitle\nDescription",
      footer: "---\nFooter line 1\nFooter line 2",
    });

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(
      "# Title\n## Subtitle\nDescription\n\n```mermaid\ngraph TD\n```\n\n---\nFooter line 1\nFooter line 2",
    );
  });

  test("includes command info when showCommand is true and commandInfo is provided", () => {
    const content = "graph TD";
    const options = createOptions({
      showCommand: true,
    });
    const commandInfo = "mermaid-markdown-wrap diagram.mmd";

    const result = formatMermaidAsMarkdown(content, options, commandInfo);

    expect(result).toBe(
      "```bash\nmermaid-markdown-wrap diagram.mmd\n```\n\n```mermaid\ngraph TD\n```",
    );
  });

  test("excludes command info when showCommand is false", () => {
    const content = "graph TD";
    const options = createOptions({
      showCommand: false,
    });
    const commandInfo = "mermaid-markdown-wrap diagram.mmd";

    const result = formatMermaidAsMarkdown(content, options, commandInfo);

    expect(result).toBe("```mermaid\ngraph TD\n```");
  });

  test("handles command info with header and footer", () => {
    const content = "graph TD";
    const options = createOptions({
      header: "# Diagram",
      footer: "© 2024",
      showCommand: true,
    });
    const commandInfo = 'mermaid-markdown-wrap "*.mmd"';

    const result = formatMermaidAsMarkdown(content, options, commandInfo);

    expect(result).toBe(
      '# Diagram\n\n```bash\nmermaid-markdown-wrap "*.mmd"\n```\n\n```mermaid\ngraph TD\n```\n\n© 2024',
    );
  });
});
