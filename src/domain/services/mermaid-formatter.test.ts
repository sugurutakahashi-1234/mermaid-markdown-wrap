import { describe, expect, test } from "bun:test";
import type { Options } from "../models/options.js";
import { formatMermaidAsMarkdown } from "./mermaid-formatter.js";

describe("formatMermaidAsMarkdown", () => {
  test("formats basic mermaid content without header or footer", () => {
    const content = "graph TD\n  A --> B";
    const options: Options = {
      keepSource: false,
      header: "",
      footer: "",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("```mermaid\ngraph TD\n  A --> B\n```");
  });

  test("formats with header only", () => {
    const content = "graph LR";
    const options: Options = {
      keepSource: false,
      header: "# My Diagram",
      footer: "",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("# My Diagram\n\n```mermaid\ngraph LR\n```");
  });

  test("formats with footer only", () => {
    const content = "sequenceDiagram";
    const options: Options = {
      keepSource: false,
      header: "",
      footer: "Generated by mermaid-markdown-wrap",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(
      "```mermaid\nsequenceDiagram\n```\n\nGenerated by mermaid-markdown-wrap",
    );
  });

  test("formats with both header and footer", () => {
    const content = "flowchart TD";
    const options: Options = {
      keepSource: false,
      header: "## Architecture",
      footer: "Copyright 2024",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(
      "## Architecture\n\n```mermaid\nflowchart TD\n```\n\nCopyright 2024",
    );
  });

  test("trims whitespace from content", () => {
    const content = "\n\n  graph TD\n  A --> B  \n\n";
    const options: Options = {
      keepSource: false,
      header: "",
      footer: "",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("```mermaid\ngraph TD\n  A --> B\n```");
  });

  test("handles empty content", () => {
    const content = "";
    const options: Options = {
      keepSource: false,
      header: "",
      footer: "",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("```mermaid\n\n```");
  });

  test("handles content with only whitespace", () => {
    const content = "   \n\n   ";
    const options: Options = {
      keepSource: false,
      header: "# Empty",
      footer: "",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe("# Empty\n\n```mermaid\n\n```");
  });

  test("preserves internal line breaks in content", () => {
    const content = `graph TD
  A[Start] --> B{Decision}
  B -->|Yes| C[Do something]
  B -->|No| D[Do something else]`;
    const options: Options = {
      keepSource: false,
      header: "",
      footer: "",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(`\`\`\`mermaid
graph TD
  A[Start] --> B{Decision}
  B -->|Yes| C[Do something]
  B -->|No| D[Do something else]
\`\`\``);
  });

  test("handles multiline headers and footers", () => {
    const content = "graph TD";
    const options: Options = {
      keepSource: false,
      header: "# Title\n## Subtitle\nDescription",
      footer: "Line 1\nLine 2",
      showCommand: true,
    };

    const result = formatMermaidAsMarkdown(content, options);

    expect(result).toBe(
      "# Title\n## Subtitle\nDescription\n\n```mermaid\ngraph TD\n```\n\nLine 1\nLine 2",
    );
  });
});
