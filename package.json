{
  "name": "mermaid-markdown-wrap",
  "version": "1.2.0",
  "description": "CLI tool to wrap .mmd/.mermaid files in Markdown with mermaid code blocks",
  "publishConfig": {
    "access": "public"
  },
  "bin": {
    "mermaid-markdown-wrap": "./bin/mermaid-markdown-wrap.js"
  },
  "exports": {
    ".": "./dist/index.js",
    "./config": {
      "types": "./dist/config.d.ts",
      "default": "./dist/config.js"
    }
  },
  "keywords": [
    "mermaid",
    "markdown",
    "wrap",
    "export",
    "convert",
    "cli",
    "typescript"
  ],
  "author": "Suguru Takahashi",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/sugurutakahashi-1234/mermaid-markdown-wrap.git"
  },
  "bugs": {
    "url": "https://github.com/sugurutakahashi-1234/mermaid-markdown-wrap/issues"
  },
  "homepage": "https://github.com/sugurutakahashi-1234/mermaid-markdown-wrap#readme",
  "type": "module",
  "engines": {
    "node": ">=20.0.0"
  },
  "files": [
    "bin/",
    "dist/",
    "schema/",
    "scripts/npm-lifecycle/postinstall.js",
    "action.yml"
  ],
  "packageManager": "bun@1.2.19",
  "scripts": {
    "postinstall": "node scripts/npm-lifecycle/postinstall.js || true",
    "prepare": "husky",
    "help": "bun src/index.ts --help",
    "help:init": "bun src/index.ts init --help",
    "help:config-show": "bun src/index.ts config-show --help",
    "help:config-validate": "bun src/index.ts config-validate --help",
    "typecheck": "tsc --noEmit -p tsconfig.json",
    "prebuild": "bun run generate:schema",
    "build": "tsc -p tsconfig.build.json",
    "dev": "bun run src/index.ts",
    "lint": "biome check --write .",
    "lint:unsafe": "biome check --write --unsafe .",
    "lint:check": "biome check .",
    "format": "biome format --write .",
    "format:check": "biome format .",
    "test": "bun test",
    "test:quiet": "bun test > /dev/null 2>&1 && echo '✅ All tests passed' || echo '❌ Tests failed - run \"bun run test\" for details'",
    "test:e2e": "bun scripts/testing/e2e-npm-package.ts",
    "test:action-marketplace": "act -W .github/workflows/local-test-action-marketplace.yml",
    "test:coverage": "bun test --coverage",
    "test:coverage:html": "bun test --coverage && bunx @lcov-viewer/cli lcov coverage/lcov.info -o coverage/html",
    "generate:schema": "bun scripts/development/generate-schema.ts && biome format --write schema/config.schema.json",
    "validate:schema": "bun scripts/development/check-schema.ts",
    "validate:codecov": "cat codecov.yml | curl --data-binary @- https://codecov.io/validate",
    "validate:renovate": "$(which npx) --yes --package renovate -- renovate-config-validator renovate.json5 --strict",
    "validate:branch": "git-branch-lint",
    "deps:size:prod": "echo 'Package                                        Size    Visual' && echo '(Production dependencies only)' && echo && npm ls --omit=dev --all --depth=Infinity 2>/dev/null | grep -E '^[│├└─┬ ]+' | sed 's/[│├└─┬ ]//g' | sed 's/@[0-9].*//' | grep -v '^$' | sort -u | while read pkg; do [ -d \"node_modules/$pkg\" ] && du -sk \"node_modules/$pkg\" 2>/dev/null | awk -v pkg=\"$pkg\" '{kb=$1; if(kb>1024) {mb=kb/1024; size=sprintf(\"%.1fM\", mb)} else {size=sprintf(\"%dK\", kb)} printf \"%-45s %7s  \", pkg, size; bar_len=int(kb/1000); if(bar_len<1) bar_len=1; if(bar_len>40) bar_len=40; for(i=0; i<bar_len; i++) printf \"█\"; print \"\"}'; done | sort -k2 -hr | head -30 && echo && echo \"Total prod deps: $(npm ls --omit=dev --all --depth=Infinity 2>/dev/null | grep -E '^[│├└─┬ ]+' | sed 's/[│├└─┬ ]//g' | sed 's/@[0-9].*//' | grep -v '^$' | sort -u | wc -l | xargs) packages\"",
    "deps:size:dev": "echo 'Package                                        Size    Visual' && echo '(Dev dependencies only - excluding production)' && echo && comm -13 <(npm ls --omit=dev --all --depth=Infinity 2>/dev/null | grep -E '^[│├└─┬ ]+' | sed 's/[│├└─┬ ]//g' | sed 's/@[0-9].*//' | grep -v '^$' | sort -u) <(npm ls --all --depth=Infinity 2>/dev/null | grep -E '^[│├└─┬ ]+' | sed 's/[│├└─┬ ]//g' | sed 's/@[0-9].*//' | grep -v '^$' | sort -u) | while read pkg; do [ -d \"node_modules/$pkg\" ] && du -sk \"node_modules/$pkg\" 2>/dev/null | awk -v pkg=\"$pkg\" '{kb=$1; if(kb>1024) {mb=kb/1024; size=sprintf(\"%.1fM\", mb)} else {size=sprintf(\"%dK\", kb)} printf \"%-45s %7s  \", pkg, size; bar_len=int(kb/1000); if(bar_len<1) bar_len=1; if(bar_len>40) bar_len=40; for(i=0; i<bar_len; i++) printf \"█\"; print \"\"}'; done | sort -k2 -hr | head -30 && echo && echo \"Total dev-only deps: $(comm -13 <(npm ls --omit=dev --all --depth=Infinity 2>/dev/null | grep -E '^[│├└─┬ ]+' | sed 's/[│├└─┬ ]//g' | sed 's/@[0-9].*//' | grep -v '^$' | sort -u) <(npm ls --all --depth=Infinity 2>/dev/null | grep -E '^[│├└─┬ ]+' | sed 's/[│├└─┬ ]//g' | sed 's/@[0-9].*//' | grep -v '^$' | sort -u) | wc -l | xargs) packages\"",
    "deps:size:all": "du -sk node_modules/* node_modules/@*/* 2>/dev/null | sort -nr | head -80 | awk 'BEGIN{print \"Package                                        Size    Visual\"} {kb=$1; path=$2; gsub(/node_modules\\//, \"\", path); if(kb>1024) {mb=kb/1024; size=sprintf(\"%.1fM\", mb)} else {size=sprintf(\"%dK\", kb)} printf \"%-45s %7s  \", path, size; bar_len=int(kb/1000); if(bar_len<1) bar_len=1; if(bar_len>40) bar_len=40; for(i=0; i<bar_len; i++) printf \"█\"; print \"\"}' && echo && echo \"Total: $(du -sh node_modules 2>/dev/null | awk '{print $1}')\"",
    "knip": "knip -c knip.config.ts",
    "knip:fix": "knip -c knip.config.ts --fix",
    "update:docs:knip": "knip -c knip.config.ts --reporter markdown > docs/reports/code-quality/unused-code.md",
    "update:docs:deps-graph": "tsg --tsconfig tsconfig.build.json --LR --md docs/reports/dependencies/deps-graph.md",
    "update:docs:deps-graph:layers": "tsg --tsconfig tsconfig.build.json --LR --abstraction src/domain --abstraction src/application --abstraction src/infrastructure --abstraction src/presentation --md docs/reports/dependencies/layers.md",
    "update:docs": "bun run update:docs:knip && bun run update:docs:deps-graph && bun run update:docs:deps-graph:layers",
    "ci": "bun run lint && bun run format && bun run typecheck && bun run lint:check && bun run format:check && bun run build && bun run knip && bun run test:quiet && bun run update:docs",
    "clean": "rm -rf bun.lock node_modules dist coverage .*.bun-build tsconfig.tsbuildinfo tsconfig.build.tsbuildinfo",
    "clean:install": "bun run clean && bun install",
    "clean:build": "bun run clean:install && bun run ci",
    "release-please:dry-run": "bunx release-please release-pr --token=$(gh auth token) --repo-url=sugurutakahashi-1234/mermaid-markdown-wrap --debug --dry-run",
    "release-please:list": "git ls-remote --heads origin | grep release-please--branches--main--components--mermaid-markdown-wrap || echo 'No release-please branches found'",
    "release-please:cleanup": "git push origin --delete release-please--branches--main--components--mermaid-markdown-wrap || true",
    "deps:check": "bunx ncu --deep",
    "deps:update": "bunx ncu -u --deep && bun install && bun run ci"
  },
  "dependencies": {
    "@clack/prompts": "^0.11.0",
    "commander": "^14.0.0",
    "cosmiconfig": "^9.0.0",
    "cosmiconfig-typescript-loader": "^6.1.0",
    "globby": "^14.1.0",
    "valibot": "^1.1.0",
    "yaml": "^2.8.0"
  },
  "devDependencies": {
    "@biomejs/biome": "^2.1.3",
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@commitlint/types": "^19.8.1",
    "@elsikora/git-branch-lint": "^1.1.2",
    "@types/bun": "^1.2.19",
    "@types/node": "^24.1.0",
    "@valibot/to-json-schema": "^1.3.0",
    "@ysk8hori/typescript-graph": "^0.26.4",
    "husky": "^9.1.7",
    "knip": "^5.62.0",
    "typescript": "^5.8.3"
  }
}
