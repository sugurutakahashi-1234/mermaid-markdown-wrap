import { describe, expect, it } from "bun:test";
import type { CLIOptions } from "../../../src/domain/models/options.js";
import { generateCommandInfo } from "../../../src/domain/services/command-info-generator.js";

describe("generateCommandInfo", () => {
  it("should generate basic command with glob pattern", () => {
    const result = generateCommandInfo("*.mermaid", {});
    expect(result).toBe('mermaid-markdown-wrap "*.mermaid"');
  });

  it("should quote glob pattern with spaces", () => {
    const result = generateCommandInfo("my files/*.mermaid", {});
    expect(result).toBe('mermaid-markdown-wrap "my files/*.mermaid"');
  });

  it("should include outDir option", () => {
    const options: CLIOptions = { outDir: "dist/" };
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd" --out-dir dist/');
  });

  it("should include header with quotes", () => {
    const options: CLIOptions = { header: "# Documentation" };
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe(
      'mermaid-markdown-wrap "*.mmd" --header "# Documentation"',
    );
  });

  it("should include footer with quotes", () => {
    const options: CLIOptions = { footer: "Generated by CI" };
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe(
      'mermaid-markdown-wrap "*.mmd" --footer "Generated by CI"',
    );
  });

  it("should include config file", () => {
    const options: CLIOptions = { config: "custom.yaml" };
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd" --config custom.yaml');
  });

  it("should include keep-source flag", () => {
    const options: CLIOptions = { keepSource: true };
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd" --keep-source');
  });

  it("should not include keep-source when false", () => {
    const options: CLIOptions = { keepSource: false };
    const result = generateCommandInfo("*.mmd", options);
    expect(result).toBe('mermaid-markdown-wrap "*.mmd"');
  });

  it("should combine multiple options", () => {
    const options: CLIOptions = {
      outDir: "output/",
      header: "# Diagrams",
      keepSource: true,
      config: "my-config.json",
    };
    const result = generateCommandInfo("**/*.mermaid", options);
    expect(result).toBe(
      'mermaid-markdown-wrap "**/*.mermaid" --out-dir output/ --header "# Diagrams" --config my-config.json --keep-source',
    );
  });

  it("should not quote simple file names", () => {
    const result = generateCommandInfo("diagram.mmd", {});
    expect(result).toBe("mermaid-markdown-wrap diagram.mmd");
  });
});
