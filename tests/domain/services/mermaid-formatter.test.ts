import { describe, expect, it } from "bun:test";
import type { Options } from "../../../src/domain/models/options.js";
import { formatMermaidAsMarkdown } from "../../../src/domain/services/mermaid-formatter.js";

describe("formatMermaidAsMarkdown", () => {
  const baseOptions: Options = {
    header: "",
    footer: "",
    removeSource: false,
    showCommand: true,
  };

  it("should format mermaid content without header/footer", () => {
    const mermaidContent = "graph LR\n  A --> B";
    const result = formatMermaidAsMarkdown(mermaidContent, baseOptions);

    expect(result).toBe("```mermaid\ngraph LR\n  A --> B\n```");
  });

  it("should format with header", () => {
    const mermaidContent = "graph LR\n  A --> B";
    const options: Options = { ...baseOptions, header: "# My Diagram" };
    const result = formatMermaidAsMarkdown(mermaidContent, options);

    expect(result).toBe("# My Diagram\n\n```mermaid\ngraph LR\n  A --> B\n```");
  });

  it("should format with footer", () => {
    const mermaidContent = "graph LR\n  A --> B";
    const options: Options = { ...baseOptions, footer: "Generated by CI" };
    const result = formatMermaidAsMarkdown(mermaidContent, options);

    expect(result).toBe(
      "```mermaid\ngraph LR\n  A --> B\n```\n\nGenerated by CI",
    );
  });

  it("should format with command info when showCommand is true", () => {
    const mermaidContent = "graph LR\n  A --> B";
    const commandInfo = 'mermaid-markdown-wrap "*.mermaid"';
    const result = formatMermaidAsMarkdown(
      mermaidContent,
      baseOptions,
      commandInfo,
    );

    expect(result).toBe(
      '```bash\nmermaid-markdown-wrap "*.mermaid"\n```\n\n```mermaid\ngraph LR\n  A --> B\n```',
    );
  });

  it("should not show command info when showCommand is false", () => {
    const mermaidContent = "graph LR\n  A --> B";
    const commandInfo = 'mermaid-markdown-wrap "*.mermaid"';
    const options: Options = { ...baseOptions, showCommand: false };
    const result = formatMermaidAsMarkdown(
      mermaidContent,
      options,
      commandInfo,
    );

    expect(result).toBe("```mermaid\ngraph LR\n  A --> B\n```");
  });

  it("should format with header and command info", () => {
    const mermaidContent = "graph LR\n  A --> B";
    const commandInfo = 'mermaid-markdown-wrap "*.mermaid" --header "# Docs"';
    const options: Options = { ...baseOptions, header: "# Docs" };
    const result = formatMermaidAsMarkdown(
      mermaidContent,
      options,
      commandInfo,
    );

    expect(result).toBe(
      '# Docs\n\n```bash\nmermaid-markdown-wrap "*.mermaid" --header "# Docs"\n```\n\n```mermaid\ngraph LR\n  A --> B\n```',
    );
  });

  it("should format with all components", () => {
    const mermaidContent = "graph LR\n  A --> B";
    const commandInfo =
      'mermaid-markdown-wrap "*.mermaid" --header "# Title" --footer "Note"';
    const options: Options = {
      ...baseOptions,
      header: "# Title",
      footer: "Note",
    };
    const result = formatMermaidAsMarkdown(
      mermaidContent,
      options,
      commandInfo,
    );

    expect(result).toBe(
      '# Title\n\n```bash\nmermaid-markdown-wrap "*.mermaid" --header "# Title" --footer "Note"\n```\n\n```mermaid\ngraph LR\n  A --> B\n```\n\nNote',
    );
  });

  it("should trim mermaid content", () => {
    const mermaidContent = "\n\n  graph LR\n  A --> B  \n\n";
    const result = formatMermaidAsMarkdown(mermaidContent, baseOptions);

    expect(result).toBe("```mermaid\ngraph LR\n  A --> B\n```");
  });
});
