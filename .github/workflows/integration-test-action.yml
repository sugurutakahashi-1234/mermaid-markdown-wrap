name: Integration Test - GitHub Action

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # NOTE: This workflow uses 'uses: ./' to test the action from the current repository
  # This is the most reliable way to test the current code because:
  # - It uses the code that's already checked out in the workflow
  # - Works on any branch (main, feature branches, forks)
  # - No need to worry about branch names or permissions
  # Alternative 'uses: owner/repo@${{ github.ref_name }}' often fails due to GitHub's security restrictions
  
  # Test 1: Basic usage with minimal configuration
  test-basic:
    runs-on: ubuntu-latest
    name: Test Basic Usage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test file
        run: |
          echo "graph TD" > test.mmd
          echo "    A[Start] --> B[End]" >> test.mmd
      
      - name: Test basic conversion
        uses: ./
        with:
          input: 'test.mmd'
      
      - name: Verify output
        run: |
          if [ ! -f "test.md" ]; then
            echo "❌ Error: test.md was not created"
            exit 1
          fi
          echo "✅ Basic conversion successful"
          cat test.md

  # Test 2: Custom output directory
  test-output-dir:
    runs-on: ubuntu-latest
    name: Test Output Directory
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test file
        run: |
          echo "sequenceDiagram" > sequence.mmd
          echo "    Alice->>Bob: Hello" >> sequence.mmd
          echo "    Bob-->>Alice: Hi!" >> sequence.mmd
      
      - name: Test with output directory
        uses: ./
        with:
          input: 'sequence.mmd'
          out-dir: './output'
      
      - name: Verify output
        run: |
          if [ ! -f "output/sequence.md" ]; then
            echo "❌ Error: output/sequence.md was not created"
            exit 1
          fi
          echo "✅ Output directory test successful"
          ls -la output/

  # Test 3: Header and footer
  test-header-footer:
    runs-on: ubuntu-latest
    name: Test Header and Footer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test file
        run: |
          echo "classDiagram" > class.mmd
          echo "    class Animal" >> class.mmd
          echo "    class Dog" >> class.mmd
          echo "    Animal <|-- Dog" >> class.mmd
      
      - name: Test with header and footer
        uses: ./
        with:
          input: 'class.mmd'
          header: |
            # Class Diagram
            This diagram shows the class hierarchy.
          footer: |
            ---
            Generated by GitHub Actions
      
      - name: Verify output
        run: |
          if [ ! -f "class.md" ]; then
            echo "❌ Error: class.md was not created"
            exit 1
          fi
          echo "✅ Header/footer test successful"
          echo "Generated content:"
          cat class.md

  # Test 4: Glob pattern
  test-glob-pattern:
    runs-on: ubuntu-latest
    name: Test Glob Pattern
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          mkdir -p test-dir/sub
          echo "graph LR; A-->B" > test-dir/diagram1.mmd
          echo "graph TD; X-->Y" > test-dir/diagram2.mmd
          echo "flowchart LR; Start-->End" > test-dir/sub/diagram3.mmd
      
      - name: Test with glob pattern
        uses: ./
        with:
          input: 'test-dir/**/*.mmd'
      
      - name: Verify outputs
        run: |
          FILES=(
            "test-dir/diagram1.md"
            "test-dir/diagram2.md"
            "test-dir/sub/diagram3.md"
          )
          
          for file in "${FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Error: $file was not created"
              exit 1
            fi
          done
          echo "✅ Glob pattern test successful"
          find test-dir -name "*.md" -type f

  # Test 5: Config file
  test-config-file:
    runs-on: ubuntu-latest
    name: Test Config File
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          echo "graph TD; A-->B" > test.mmd
          cat > config.json <<EOF
          {
            "header": "## Configured Header\\n\\nThis is from config file",
            "footer": "\\n---\\nGenerated with config file"
          }
          EOF
      
      - name: Test with config file
        uses: ./
        with:
          input: 'test.mmd'
          config: 'config.json'
          out-dir: './config-output'
      
      - name: Verify output
        run: |
          if [ ! -f "config-output/test.md" ]; then
            echo "❌ Error: config-output/test.md was not created"
            exit 1
          fi
          
          # Check if header from config is present
          if ! grep -q "## Configured Header" config-output/test.md; then
            echo "❌ Error: Header from config not found"
            exit 1
          fi
          
          # Check if footer from config is present
          if ! grep -q "Generated with config file" config-output/test.md; then
            echo "❌ Error: Footer from config not found"
            exit 1
          fi
          
          echo "✅ Config file test successful"
          cat config-output/test.md

  # Test 6: Remove source files
  test-remove-source:
    runs-on: ubuntu-latest
    name: Test Remove Source
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create a test file
        run: |
          mkdir -p temp-test
          echo "pie title Pets" > temp-test/test.mmd
          echo '    "Dogs" : 386' >> temp-test/test.mmd
          echo '    "Cats" : 85' >> temp-test/test.mmd
      
      - name: Test with remove-source
        uses: ./
        with:
          input: 'temp-test/test.mmd'
          remove-source: 'true'
      
      - name: Verify removal
        run: |
          if [ -f "temp-test/test.mmd" ]; then
            echo "❌ Error: Source file was not removed"
            exit 1
          fi
          
          if [ ! -f "temp-test/test.md" ]; then
            echo "❌ Error: Output file was not created"
            exit 1
          fi
          
          echo "✅ Remove source test successful"

  # Test 7: Hide command option
  test-hide-command:
    runs-on: ubuntu-latest
    name: Test Hide Command
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test file
        run: |
          echo "stateDiagram-v2" > state.mmd
          echo "    [*] --> Active" >> state.mmd
          echo "    Active --> [*]" >> state.mmd
      
      - name: Test with hide-command
        uses: ./
        with:
          input: 'state.mmd'
          out-dir: './hide-command-output'
          hide-command: 'true'
      
      - name: Verify output
        run: |
          if [ ! -f "hide-command-output/state.md" ]; then
            echo "❌ Error: Output file was not created"
            exit 1
          fi
          
          # Check that command is not present in the output
          if grep -q "mermaid-markdown-wrap" hide-command-output/state.md; then
            echo "❌ Error: Command was not hidden in output"
            cat hide-command-output/state.md
            exit 1
          fi
          
          echo "✅ Hide command test successful"

  # Test 8: Error handling - non-existent file
  test-error-handling:
    runs-on: ubuntu-latest
    name: Test Error Handling
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test with non-existent file
        id: error-test
        continue-on-error: true
        uses: ./
        with:
          input: 'non-existent-file.mmd'
      
      - name: Verify error
        run: |
          if [ "${{ steps.error-test.outcome }}" != "failure" ]; then
            echo "❌ Error: Action should have failed for non-existent file"
            exit 1
          fi
          echo "✅ Error handling test successful"

  # Summary job to ensure all tests pass
  all-tests-pass:
    runs-on: ubuntu-latest
    needs: [
      test-basic,
      test-output-dir,
      test-header-footer,
      test-glob-pattern,
      test-config-file,
      test-remove-source,
      test-hide-command,
      test-error-handling
    ]
    steps:
      - name: All tests passed
        run: |
          echo "🎉 All integration tests passed successfully!"