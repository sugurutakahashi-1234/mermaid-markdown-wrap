name: test-action-marketplace

# This workflow is designed to be run locally with Act CLI
# Usage: bun run test:action-marketplace
#
# To run specific job:
# act -W .github/workflows/local-test-action-marketplace.yml -j test-basic
#
# NOTE: This is the local version of:
# .github/workflows/ci-test-action-marketplace.yml

on:
  workflow_dispatch:

jobs:
  # Basic usage - Verify basic mermaid wrapping functionality
  test-basic:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Basic Usage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test file
        run: |
          echo "graph TD" > test.mmd
          echo "    A[Start] --> B[End]" >> test.mmd
      
      - name: Test basic conversion
        uses: ./
        with:
          input: 'test.mmd'
          local-test: 'true'
      
      - name: Verify output
        run: |
          # Check file exists
          if [ ! -f "test.md" ]; then
            echo "‚ùå Error: test.md was not created"
            exit 1
          fi
          
          # Verify mermaid code block exists
          if ! grep -q '```mermaid' test.md; then
            echo "‚ùå Error: Mermaid code block not found"
            exit 1
          fi
          
          # Verify content is preserved
          if ! grep -q 'graph TD' test.md; then
            echo "‚ùå Error: Original content not preserved"
            exit 1
          fi
          
          # Verify closing block
          if ! grep -q '```$' test.md; then
            echo "‚ùå Error: Closing code block not found"
            exit 1
          fi
          
          echo "‚úÖ Basic conversion successful - all checks passed"
          echo "üìÑ Generated content:"
          cat test.md

  # Glob pattern - Verify multiple file processing with glob patterns
  test-glob-pattern:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Glob Pattern
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files in different directories
        run: |
          # Create directory structure
          mkdir -p docs/diagrams
          mkdir -p src/charts
          
          # Create multiple .mmd files
          echo "graph TD" > docs/diagram1.mmd
          echo "A-->B" >> docs/diagram1.mmd
          
          echo "graph TD" > docs/diagrams/sequence.mmd
          echo "A-->B" >> docs/diagrams/sequence.mmd
          
          echo "graph TD" > src/flow.mmd
          echo "A-->B" >> src/flow.mmd
          
          echo "graph TD" > src/charts/pie.mmd
          echo "A-->B" >> src/charts/pie.mmd
          
          # Create a .mermaid file to test both extensions
          echo "graph TD" > state.mermaid
          echo "A-->B" >> state.mermaid
      
      - name: Test glob pattern conversion
        uses: ./
        with:
          input: '**/*.{mmd,mermaid}'
          local-test: 'true'
      
      - name: Verify all files were converted
        run: |
          # Expected conversions
          expected_files=(
            "docs/diagram1.md"
            "docs/diagrams/sequence.md"
            "src/flow.md"
            "src/charts/pie.md"
            "state.md"
          )
          
          # Check each expected file
          for file in "${expected_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Error: $file was not created"
              exit 1
            fi
            echo "‚úÖ Found: $file"
          done
          
          # Verify mermaid blocks in each file
          for file in "${expected_files[@]}"; do
            if ! grep -q '```mermaid' "$file"; then
              echo "‚ùå Error: Mermaid block not found in $file"
              exit 1
            fi
          done
          
          # Count total conversions
          total_md=$(find . -name "*.md" -type f | wc -l)
          echo "üìä Total .md files created: $total_md"
          
          echo "‚úÖ Glob pattern test successful - all files converted"

  # Output directory - Verify --out-dir option works correctly
  test-output-dir:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Output Directory
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test file
        run: |
          echo "graph TD" > sequence.mmd
          echo "A-->B" >> sequence.mmd
      
      - name: Test with output directory
        uses: ./
        with:
          input: 'sequence.mmd'
          out-dir: './output'
          local-test: 'true'
      
      - name: Verify output
        run: |
          # Check directory was created
          if [ ! -d "output" ]; then
            echo "‚ùå Error: output directory was not created"
            exit 1
          fi
          
          # Check file exists in correct location
          if [ ! -f "output/sequence.md" ]; then
            echo "‚ùå Error: output/sequence.md was not created"
            exit 1
          fi
          
          # Verify source file still exists (not moved)
          if [ ! -f "sequence.mmd" ]; then
            echo "‚ùå Error: Source file was incorrectly removed"
            exit 1
          fi
          
          # Verify content
          if ! grep -q '```mermaid' output/sequence.md; then
            echo "‚ùå Error: Mermaid block not found in output"
            exit 1
          fi
          
          if ! grep -q 'graph TD' output/sequence.md; then
            echo "‚ùå Error: Content not preserved in output"
            exit 1
          fi
          
          echo "‚úÖ Output directory test successful - file created in correct location"
          echo "üìÅ Directory structure:"
          ls -la output/

  # Header and footer - Verify header/footer content is added correctly
  test-header-footer:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Header and Footer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test file
        run: |
          echo "graph TD" > class.mmd
          echo "A-->B" >> class.mmd
      
      - name: Test with header and footer
        uses: ./
        with:
          input: 'class.mmd'
          header: |
            # Class Diagram
            This diagram shows the class hierarchy.
          footer: |
            ---
            Generated by GitHub Actions
          local-test: 'true'
      
      - name: Verify output
        run: |
          # Check file exists
          if [ ! -f "class.md" ]; then
            echo "‚ùå Error: class.md was not created"
            exit 1
          fi
          
          # Verify header content at the beginning
          if ! head -n 2 class.md | grep -q "# Class Diagram"; then
            echo "‚ùå Error: Header not found at beginning of file"
            exit 1
          fi
          
          if ! head -n 3 class.md | grep -q "This diagram shows the class hierarchy"; then
            echo "‚ùå Error: Header description not found"
            exit 1
          fi
          
          # Verify mermaid block exists
          if ! grep -q '```mermaid' class.md; then
            echo "‚ùå Error: Mermaid code block not found"
            exit 1
          fi
          
          # Verify footer content at the end
          if ! tail -n 2 class.md | grep -q "Generated by GitHub Actions"; then
            echo "‚ùå Error: Footer not found at end of file"
            exit 1
          fi
          
          if ! tail -n 3 class.md | grep -q "^---$"; then
            echo "‚ùå Error: Footer separator not found"
            exit 1
          fi
          
          echo "‚úÖ Header/footer test successful - content correctly positioned"
          echo "üìÑ Generated file structure:"
          echo "--- START OF FILE ---"
          head -n 5 class.md
          echo "... (middle content) ..."
          tail -n 5 class.md
          echo "--- END OF FILE ---"

  # Remove source - Verify --remove-source option deletes original files
  test-remove-source:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Remove Source Option
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          echo "graph TD" > remove1.mmd
          echo "A-->B" >> remove1.mmd
          
          echo "graph TD" > remove2.mmd
          echo "A-->B" >> remove2.mmd
          echo "Original files created"
          ls -la *.mmd
      
      - name: Test with remove-source option
        uses: ./
        with:
          input: 'remove*.mmd'
          remove-source: 'true'
          local-test: 'true'
      
      - name: Verify behavior
        run: |
          # Check .md files were created
          if [ ! -f "remove1.md" ]; then
            echo "‚ùå Error: remove1.md was not created"
            exit 1
          fi
          
          if [ ! -f "remove2.md" ]; then
            echo "‚ùå Error: remove2.md was not created"
            exit 1
          fi
          
          # Check source files were removed
          if [ -f "remove1.mmd" ]; then
            echo "‚ùå Error: remove1.mmd should have been deleted"
            exit 1
          fi
          
          if [ -f "remove2.mmd" ]; then
            echo "‚ùå Error: remove2.mmd should have been deleted"
            exit 1
          fi
          
          # Verify content was preserved in .md files
          if ! grep -q 'graph TD' remove1.md; then
            echo "‚ùå Error: Content not preserved in remove1.md"
            exit 1
          fi
          
          echo "‚úÖ Remove source test successful - source files deleted after conversion"
          echo "üìÑ Remaining files:"
          ls -la *.md

  # Hide command - Verify --hide-command option removes command from output
  test-hide-command:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Hide Command Option
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          echo "graph TD" > hide-test.mmd
          echo "A-->B" >> hide-test.mmd
      
      - name: Test WITHOUT hide-command (default)
        uses: ./
        with:
          input: 'hide-test.mmd'
          local-test: 'true'
      
      - name: Verify default behavior (command shown)
        run: |
          if ! grep -q 'bash' hide-test.md || ! grep -q 'mermaid-markdown-wrap' hide-test.md; then
            echo "‚ùå Error: Command should be visible by default"
            exit 1
          fi
          echo "‚úÖ Default: Command is visible"
          rm hide-test.md
      
      - name: Test WITH hide-command
        uses: ./
        with:
          input: 'hide-test.mmd'
          hide-command: 'true'
          local-test: 'true'
      
      - name: Verify hide-command behavior
        run: |
          if grep -q 'bash' hide-test.md || grep -q 'mermaid-markdown-wrap' hide-test.md; then
            echo "‚ùå Error: Command should be hidden when hide-command is true"
            exit 1
          fi
          echo "‚úÖ Hide command successful - no command in output"

  # Config file - Verify --config option loads settings from file
  test-config-file:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Config File Option
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test config file
        run: |
          cat > test-config.yml << 'EOF'
          header: |
            # From Config File
            This header comes from the config file.
          footer: |
            ---
            Footer from config file
          EOF
          
          echo "graph TD" > config-test.mmd
          echo "A-->B" >> config-test.mmd
      
      - name: Test with config file
        uses: ./
        with:
          input: 'config-test.mmd'
          config: './test-config.yml'
          local-test: 'true'
      
      - name: Verify config file was applied
        run: |
          # Check file exists
          if [ ! -f "config-test.md" ]; then
            echo "‚ùå Error: config-test.md was not created"
            exit 1
          fi
          
          # Verify header from config
          if ! grep -q "# From Config File" config-test.md; then
            echo "‚ùå Error: Header from config file not found"
            exit 1
          fi
          
          if ! grep -q "This header comes from the config file" config-test.md; then
            echo "‚ùå Error: Header content from config file not found"
            exit 1
          fi
          
          # Verify footer from config
          if ! grep -q "Footer from config file" config-test.md; then
            echo "‚ùå Error: Footer from config file not found"
            exit 1
          fi
          
          echo "‚úÖ Config file test successful - settings loaded and applied"

  # PR comment dry-run (default) - Verify dry-run mode for PR comments with default settings
  test-pr-comment-dry-run-default:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test PR Comment Dry-Run Mode (Default)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          echo "graph TD" > pr-test1.mmd
          echo "A-->B" >> pr-test1.mmd
          
          echo "graph TD" > pr-test2.mmd
          echo "C-->D" >> pr-test2.mmd
      
      - name: Test with PR comment dry-run
        uses: ./
        with:
          input: 'pr-test*.mmd'
          pr-comment-mode: 'all'
          pr-comment-dry-run: 'true'
          pr-comment-header: 'true'
          pr-comment-details: 'false'
          local-test: 'true'
      
      - name: Verify dry-run behavior
        run: |
          # Check that .md files were created
          if [ ! -f "pr-test1.md" ] || [ ! -f "pr-test2.md" ]; then
            echo "‚ùå Error: Markdown files were not created"
            exit 1
          fi
          
          # Check that pr-comments-data.json was created (even in dry-run)
          if [ ! -f "pr-comments-data.json" ]; then
            echo "‚ùå Error: pr-comments-data.json was not created"
            exit 1
          fi
          
          # Verify comment data structure
          COMMENT_COUNT=$(jq '. | length' pr-comments-data.json)
          if [ "$COMMENT_COUNT" -ne 2 ]; then
            echo "‚ùå Error: Expected 2 comments, found $COMMENT_COUNT"
            exit 1
          fi
          
          # Verify comment contains expected content
          if ! jq -r '.[0].body' pr-comments-data.json | grep -q "pr-test1.md"; then
            echo "‚ùå Error: First comment doesn't contain expected filename"
            exit 1
          fi
          
          if ! jq -r '.[1].body' pr-comments-data.json | grep -q "pr-test2.md"; then
            echo "‚ùå Error: Second comment doesn't contain expected filename"
            exit 1
          fi
          
          echo "‚úÖ Dry-run test successful - conversion completed and comments prepared without posting"
          echo "üìä Comment data structure:"
          jq -r '.[] | "File: \(.filename)"' pr-comments-data.json

  # PR comment dry-run (no header) - Verify dry-run mode with header disabled
  test-pr-comment-dry-run-no-header:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test PR Comment Dry-Run Mode (No Header)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          echo "graph TD" > pr-test1.mmd
          echo "A-->B" >> pr-test1.mmd
          
          echo "graph TD" > pr-test2.mmd
          echo "C-->D" >> pr-test2.mmd
      
      - name: Test with PR comment dry-run (no header)
        uses: ./
        with:
          input: 'pr-test*.mmd'
          pr-comment-mode: 'all'
          pr-comment-dry-run: 'true'
          pr-comment-header: 'false'    # Header disabled
          pr-comment-details: 'false'
          local-test: 'true'
      
      - name: Verify dry-run behavior (no header)
        run: |
          # Check that .md files were created
          if [ ! -f "pr-test1.md" ] || [ ! -f "pr-test2.md" ]; then
            echo "‚ùå Error: Markdown files were not created"
            exit 1
          fi
          
          # Check that pr-comments-data.json was created
          if [ ! -f "pr-comments-data.json" ]; then
            echo "‚ùå Error: pr-comments-data.json was not created"
            exit 1
          fi
          
          # Verify comment count
          COMMENT_COUNT=$(jq '. | length' pr-comments-data.json)
          if [ "$COMMENT_COUNT" -ne 2 ]; then
            echo "‚ùå Error: Expected 2 comments, found $COMMENT_COUNT"
            exit 1
          fi
          
          # Verify header is NOT included (check for the specific header format)
          if jq -r '.[0].body' pr-comments-data.json | grep -q "> ### üìÑ \\[mermaid-markdown-wrap\\]"; then
            echo "‚ùå Error: Header should not be present when pr-comment-header is false"
            exit 1
          fi
          
          if jq -r '.[1].body' pr-comments-data.json | grep -q "> ### üìÑ \\[mermaid-markdown-wrap\\]"; then
            echo "‚ùå Error: Header should not be present in second comment"
            exit 1
          fi
          
          echo "‚úÖ No-header test successful - comments prepared without headers"
          echo "üìä Comment data structure:"
          jq -r '.[] | "File: \(.filename)"' pr-comments-data.json

  # PR comment dry-run (with details) - Verify dry-run mode with collapsible details
  test-pr-comment-dry-run-with-details:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test PR Comment Dry-Run Mode (With Details)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          echo "graph TD" > pr-test1.mmd
          echo "A-->B" >> pr-test1.mmd
          
          echo "graph TD" > pr-test2.mmd
          echo "C-->D" >> pr-test2.mmd
      
      - name: Test with PR comment dry-run (with details)
        uses: ./
        with:
          input: 'pr-test*.mmd'
          pr-comment-mode: 'all'
          pr-comment-dry-run: 'true'
          pr-comment-header: 'true'
          pr-comment-details: 'true'     # Collapsible details enabled
          local-test: 'true'
      
      - name: Verify dry-run behavior (with details)
        run: |
          # Check that .md files were created
          if [ ! -f "pr-test1.md" ] || [ ! -f "pr-test2.md" ]; then
            echo "‚ùå Error: Markdown files were not created"
            exit 1
          fi
          
          # Check that pr-comments-data.json was created
          if [ ! -f "pr-comments-data.json" ]; then
            echo "‚ùå Error: pr-comments-data.json was not created"
            exit 1
          fi
          
          # Verify comment count
          COMMENT_COUNT=$(jq '. | length' pr-comments-data.json)
          if [ "$COMMENT_COUNT" -ne 2 ]; then
            echo "‚ùå Error: Expected 2 comments, found $COMMENT_COUNT"
            exit 1
          fi
          
          # Verify details tags are included
          if ! jq -r '.[0].body' pr-comments-data.json | grep -q "<details>"; then
            echo "‚ùå Error: <details> tag should be present when pr-comment-details is true"
            exit 1
          fi
          
          if ! jq -r '.[0].body' pr-comments-data.json | grep -q "<summary>"; then
            echo "‚ùå Error: <summary> tag should be present when pr-comment-details is true"
            exit 1
          fi
          
          if ! jq -r '.[1].body' pr-comments-data.json | grep -q "<details>"; then
            echo "‚ùå Error: <details> tag should be present in second comment"
            exit 1
          fi
          
          echo "‚úÖ Details test successful - comments prepared with collapsible sections"
          echo "üìä Comment data structure:"
          jq -r '.[] | "File: \(.filename)"' pr-comments-data.json

  # PR comment dry-run (changed mode) - Verify changed mode correctly filters files
  test-pr-comment-dry-run-changed:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test PR Comment Dry-Run Mode (Changed)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files (simulating pre-existing state)
        run: |
          # Create .mmd files
          echo "graph TD" > unchanged.mmd
          echo "A-->B" >> unchanged.mmd
          
          echo "graph TD" > changed.mmd
          echo "C-->D" >> changed.mmd
          
          echo "graph TD" > new-file.mmd
          echo "E-->F" >> new-file.mmd
          
          # Create pre-existing .md files to simulate unchanged state (without command info)
          printf '```mermaid\ngraph TD\nA-->B\n```' > unchanged.md
          
          # Create pre-existing .md file with different content (will be changed)
          printf '```mermaid\ngraph TD\nOLD-->CONTENT\n```' > changed.md
          
          # new-file.md doesn't exist (will be created)
      
      - name: Test with PR comment changed mode
        uses: ./
        with:
          input: '*.mmd'
          pr-comment-mode: 'changed'
          pr-comment-dry-run: 'true'
          pr-comment-header: 'true'
          pr-comment-details: 'false'
          local-test: 'true'
          hide-command: 'true'  # Hide command to ensure content matches exactly for unchanged files
      
      - name: Verify changed mode behavior
        run: |
          # Check that all .md files were created/updated
          if [ ! -f "unchanged.md" ] || [ ! -f "changed.md" ] || [ ! -f "new-file.md" ]; then
            echo "‚ùå Error: Not all markdown files were created"
            exit 1
          fi
          
          # Check that pr-comments-data.json was created
          if [ ! -f "pr-comments-data.json" ]; then
            echo "‚ùå Error: pr-comments-data.json was not created"
            exit 1
          fi
          
          # Check conversion results
          echo "üìä Conversion results:"
          jq -r '.conversions[] | "\(.mermaidFile): converted=\(.converted), changed=\(.changed // "undefined")"' conversion-results.json
          
          # Verify comment count (should be 2: changed.md and new-file.md)
          COMMENT_COUNT=$(jq '. | length' pr-comments-data.json)
          if [ "$COMMENT_COUNT" -ne 2 ]; then
            echo "‚ùå Error: Expected 2 comments (changed files only), found $COMMENT_COUNT"
            exit 1
          fi
          
          # Verify the correct files are in comments
          FILES_IN_COMMENTS=$(jq -r '.[].filename' pr-comments-data.json | sort)
          EXPECTED_FILES=$(echo -e "changed.md\nnew-file.md" | sort)
          
          if [ "$FILES_IN_COMMENTS" != "$EXPECTED_FILES" ]; then
            echo "‚ùå Error: Wrong files in comments"
            echo "Expected: $EXPECTED_FILES"
            echo "Got: $FILES_IN_COMMENTS"
            exit 1
          fi
          
          echo "‚úÖ Changed mode test successful - only changed files included in comments"
          echo "üìã Files with comments:"
          jq -r '.[] | "  - \(.filename)"' pr-comments-data.json
  
  # PR comment dry-run (mode off) - Verify behavior when comment mode is off
  test-pr-comment-dry-run-mode-off:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test PR Comment Dry-Run Mode (Mode Off)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test files
        run: |
          echo "graph TD" > pr-test1.mmd
          echo "A-->B" >> pr-test1.mmd
          
          echo "graph TD" > pr-test2.mmd
          echo "C-->D" >> pr-test2.mmd
      
      - name: Test with PR comment mode off
        uses: ./
        with:
          input: 'pr-test*.mmd'
          pr-comment-mode: 'off'         # Comment functionality disabled
          pr-comment-dry-run: 'true'
          local-test: 'true'
      
      - name: Verify behavior (mode off)
        run: |
          # Check that .md files were created (conversion should still work)
          if [ ! -f "pr-test1.md" ] || [ ! -f "pr-test2.md" ]; then
            echo "‚ùå Error: Markdown files were not created"
            exit 1
          fi
          
          # Check that pr-comments-data.json was NOT created
          if [ -f "pr-comments-data.json" ]; then
            echo "‚ùå Error: pr-comments-data.json should not be created when pr-comment-mode is off"
            exit 1
          fi
          
          echo "‚úÖ Mode-off test successful - conversion completed without comment preparation"

  # Error handling - Verify proper error handling for invalid inputs
  test-error-handling:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Error Handling (Expected Failure)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test with non-existent file
        id: error-test
        continue-on-error: true  # Allow this step to fail without failing the workflow
        uses: ./
        with:
          input: 'non-existent-file.mmd'
          local-test: 'true'
      
      - name: Verify error handling
        run: |
          # Verify the action failed
          if [ "${{ steps.error-test.outcome }}" != "failure" ]; then
            echo "‚ùå Error: Action should have failed for non-existent file"
            exit 1
          fi
          
          # Check if conversion-results.json was created (for error reporting)
          if [ -f "conversion-results.json" ]; then
            echo "üìä Error report generated:"
            cat conversion-results.json
          fi
          
          echo "‚úÖ Error handling test successful - action correctly failed for invalid input"

  # Summary job - Display test results summary
  summary:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: Test Summary
    needs: [
      # input (required) - Basic usage and glob pattern
      test-basic,          # Single file input
      test-glob-pattern,   # Glob pattern input
      # out-dir
      test-output-dir,
      # header
      # footer
      test-header-footer,  # Tests both header and footer
      # remove-source
      test-remove-source,
      # hide-command
      test-hide-command,
      # config
      test-config-file,
      # pr-comment-dry-run - Multiple test cases
      test-pr-comment-dry-run-default,     # Default settings (header=true, details=false)
      test-pr-comment-dry-run-no-header,   # Header disabled
      test-pr-comment-dry-run-with-details, # Collapsible details enabled
      test-pr-comment-dry-run-changed,     # Changed mode (only changed files)
      test-pr-comment-dry-run-mode-off,    # Comment mode disabled
      # Error handling (last)
      test-error-handling
    ]
    if: always()
    steps:
      - name: Show test results
        run: |
          echo ""
          echo "üìä Test Results:"
          echo ""
          echo '${{ toJson(needs) }}' | jq -r 'to_entries[] | "  [\(.value.result)] \(.key)"'
          echo ""
          
          # Check if any job failed (excluding test-error-handling which is expected to succeed)
          if echo '${{ toJson(needs) }}' | jq -e 'to_entries[] | select(.key != "test-error-handling") | select(.value.result != "success")' > /dev/null 2>&1; then
            echo "‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå"
            echo "‚ùå                                                    ‚ùå"
            echo "‚ùå         üí• SOME TESTS FAILED üí•                    ‚ùå"
            echo "‚ùå                                                    ‚ùå"
            echo "‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå"
            exit 1
          else
            echo "‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ"
            echo "‚úÖ                                                    ‚úÖ"
            echo "‚úÖ          üéâ ALL TESTS PASSED! üéâ                   ‚úÖ"
            echo "‚úÖ                                                    ‚úÖ"
            echo "‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ"
          fi